#! /usr/bin/env python

import json
import sys
import os
from os import mkdir, listdir
from os.path import join, basename, realpath, dirname, isfile
import subprocess
from subprocess import call

from shutil import *

from utils import *
from project import Project


def write_data(data, file):
    with open(file, "w") as f:
        json.dump(data, f)


def ensure_dir():
    this_path = os.getcwd()
    makefile_path = join(this_path, ".book")
    if not isfile(makefile_path):
        die("This directory does not contain a book!", -2)


def create_new():
    title = raw_input("Title: ")
    if not title:
        die("Title cannot be empty", -1)

    confirmation = confirm("Create new book with title '%(title)s':" % locals())
    if not confirmation:
        die("OK!")

    # Do we want to use [v]ersion [c]ontrol?
    use_vc = confirm("Use git?")

    # Spaces are replaced with dashes because spaces may cause problems
    # with shell commands.
    # We store the title in the config file, anyway.
    directory = title.replace(" ", "-").lower()

    # Put data into dictionary. We will write it to disk later.
    project = Project()
    project.metadata["title"] = title
    project.metadata["directory"] = directory
    project.metadata["use_vc"] = use_vc

    # Path to the script folder (it contains the skeleton folder)
    script_path = dirname(realpath(__file__))
    src = join(script_path, "skeleton")
    dest = join(os.getcwd(), directory)

    # Copy the entire skeleton.
    # This will also create the destionation folder.
    copytree(src, dest)

    # Now, we write the config file.
    project.write_data(write_path=directory)

    # If we want to use VC, initialize it now.
    if use_vc:
        cmds = [
            "git init -q",
            "git add -A",
            "git commit -q -m \"Created book\""
        ]
        subprocess.Popen("; ".join(cmds), shell=True, cwd=directory)

    success("Success!")


def make_book(type):
    ensure_dir()

    this_path = os.getcwd()
    makefile_path = join(this_path, "Makefile")

    # If the Makefile does not exist,
    # we will copy it in.
    if not isfile(makefile_path):
        # Copy Makefile in
        script_path = dirname(realpath(__file__))
        src = join(script_path, "skeleton/Makefile")
        copyfile(src, makefile_path)

    cmd = "make %(type)s" % locals()
    subprocess.Popen(cmd, shell=True, cwd=this_path)


if __name__ == "__main__":
    if (len(sys.argv) == 1):
        die("Please specify an action!", -1)

    action = sys.argv[1]
    if action == "new":
        create_new()
    elif action == "make":
        type = "pdf"
        if len(sys.argv) <= 2:
            print("No type given. Defaulting to PDF.")
        else:
            type = sys.argv[2]

        make_book(type)


